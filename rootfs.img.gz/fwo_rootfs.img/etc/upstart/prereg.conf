start on mounted_varLocal
stop on stopping filesystems

export LANG LC_ALL

task

script
    source /etc/upstart/functions

    # Common environment vars
    REGFILE=/var/local/appreg.db
    REGBACKUPFILE=/var/local/appreg-backup.db
    REGFILEFORMATFILE=/var/local/appregdbupgrade
    FLAGDIR=/var/local/reg
    FLAG=$FLAGDIR/flag
    IFILE=/opt/var/local/reg/prereg.db
    SERVERCONFFILE=/opt/var/local/reg/ServerConfig.db
    SERVERCONFFLAG=$FLAGDIR/serverflag

    f_prereg_setup () {
        if [ ! -e $FLAG ]; then
            echo "0" > $FLAG
        fi
    
        if [ ! -e $SERVERCONFFLAG ]; then
            echo "0" > $SERVERCONFFLAG
        fi
        
        # If there is no registry, this is a 'fresh' system.
        # Copy the registry, and clear the OSGi cache for good measure
        if [ ! -e $REGFILE ]; then
            cp $IFILE $REGFILE; sts=$?
            if [ "${sts}" -ne "0" ]; then
                f_log E prereg "COPY_FAILED" "" "src=${IFILE},dest${REGFILE},status=${sts}"
                return $sts
            fi

            /usr/bin/register -m $SERVERCONFFILE; sts=$?
            if [ "${sts}" -ne "0" ]; then
                f_log E prereg "MERGE_FAILED" "" "file=${SERVERCONFFILE},status=${sts}" "on register copy"
                return $sts
            fi

            echo `stat -c %Y -t $IFILE` > $FLAG
            # clear OSGi cache.
            rm -rf /var/local/java/default
            return 0
        fi
    
        FLAGTIME=`cat $FLAG`
        PRETIME=`stat -c %Y -t $IFILE`
        
        if [ ! -e $REGFILEFORMATFILE ] ; then
            # with sqlite latest version , file format of DB is 4 which is different from old versions
            # though DB created should be readable with new version 
            # a) upgrading to make sure latest features are available 
            # b) latest version assumes DB format to be latest by default unless specified

            /usr/bin/register -u $REGFILE -o $REGBACKUPFILE; sts=$?
            if [ "${sts}" -eq "0" ]; then
               f_log I prereg "UPGRADE_PASSED" "Upgrade to new file format done" 
               mv $REGBACKUPFILE $REGFILE
            fi
            touch $REGFILEFORMATFILE
        fi
        if [ $FLAGTIME -ne $PRETIME ]; then
            /usr/bin/register -m $IFILE; sts=$?
            if [ "${sts}" -ne "0" ]; then
                f_log E prereg "MERGE_FAILED" "" "file=${IFILE},status=${sts}"
                return $sts
            fi

            echo $PRETIME > $FLAG
            # clear OSGi cache.  This will happen on full-system flashes, OTAs, etc.
            rm -rf /var/local/java/default
        fi

        SFLAGTIME=`cat $SERVERCONFFLAG`
        SPRETIME=`stat -c %Y -t $SERVERCONFFILE`
        # if the ServerConfig data has been updated, merge it.
        if [ $SFLAGTIME -ne $SPRETIME ]; then
            /usr/bin/register -m $SERVERCONFFILE; sts=$?
            if [ "${sts}" -ne "0" ]; then
                f_log E prereg "MERGE_FAILED" "" "file=${SERVERCONFFILE},status=${sts}"
                return $sts
            fi

            echo $SPRETIME > $SERVERCONFFLAG
        fi
        
        QUICK_CHECK=`sqlite3 $REGFILE "pragma quick_check"` ; sts=$?               
        if [ "${sts}" -ne "0" -o "${QUICK_CHECK}" != "ok" ]; then                  
             set +e                                 
             source /usr/bin/record_device_metric.sh                   
             record_device_metric upstart appreg AppregistryCorruption 1 '' $METRIC_PRIORITY_HIGH $METRIC_TYPE_COUNTER
             f_log E prereg "db integrity check failed" "" "sts=${sts}"                                               
             set -e                                                                 
             return 1                                                              
        else                                                                       
             f_log I prereg "PRAGMA_QUICK_CHECK_PASSED" "" "sts=${sts}" 
        fi    
    }

    f_regfile_set_owner () {
        if [ ! -e $REGFILE ] ; then
	    f_log E prereg "CHOWN_FAILED" "File does not exist." "file=${REGFILE}"
        fi

        #Change ownership of $REGFILE. This is essential for non-root processes to write to the database.
        chown framework:javausers $REGFILE || true
    }

    
    # initial setup/error checking
    if [ ! -e $IFILE ]; then
        f_log E prereg nodb "" "build error - $IFILE not present in build"
        exit 0
    fi
    
    if [ ! -e $SERVERCONFFILE ]; then
        f_log E prereg nodb "" "build error - $SERVERCONFFILE not present in build"
        exit 0
    fi
    
    if [ ! -d $FLAGDIR ]; then
        mkdir -p $FLAGDIR
    fi

    # first attempt
    retry=0
    f_prereg_setup || retry=1
    if [ "$retry" -ne "0" ]; then
        f_log I prereg "CORRUPTED_APPREG" "" "retry=${retry}" "retrying"
        
        # remove the flags and the appreg
        echo "0" > $FLAG
        echo "0" > $SERVERCONFFLAG
        rm -f $REGFILE

        # ...and try again
        f_prereg_setup
    fi

    f_regfile_set_owner
end script
