# /var/local is the persistent read-write store
# TODO - move mount args to /etc/fstab

start on started filesystems_keys
stop on stopping filesystems

export LANG LC_ALL

emits mounted_varLocal
emits migrate_DB

pre-start script
  source /etc/default/layout
  source /etc/upstart/functions

  local=/dev/$ROOT$LOCAL_P

# First take care of var/local
  if ! mount -t ext3 -o rw $local /var/local; then
    f_log I filesystems_var_local createvarlocal "Creating /var/local filesystem"
    mkfs.ext3 -F -L LocalVars $local
    tune2fs -c 0 -i 0 $local	# disable fsck
    rm -rf /var/local/*
    mount -t ext3 -o rw $local /var/local
    cp -arf /opt/var/local/. /var/local/.
    cp -arf /opt/amazon/factory_fresh/. /var/local/system/.
    cp /etc/guid /var/local/guid || true
  fi
  cp_optvarlocal=/var/local/copy_optvarlocal

  if [ ! -f /etc/guid ]; then
    #Mouting root RW
    mount -o rw,remount /
    if [ -f /var/local/guid ]; then
      f_log I filesystems_var_local guid "Fetching existing guid"
      cp /var/local/guid /etc/guid
    else
      f_log I filesystems_var_local guid "Generating guid"
      (idme -s ; dd if=/dev/urandom bs=1 count=32) | md5sum | awk '{print $1}' > /etc/guid
      cp /etc/guid /var/local/guid
    fi
    #Mounting root RO
    mount -o ro,remount /
  fi

  if [ -f "${cp_optvarlocal}" ]; then
    cp -arf /opt/var/local/. /var/local/.
    cp -arf /opt/amazon/factory_fresh/. /var/local/system/.
    rm $cp_optvarlocal
  fi

  mkdir -p /var/local/system
  mkdir -p /var/local/logLevel.conf

  if [ ! -d /var/local/certman ]; then
    # This scenario would be hit when we migrate from a version without certman support.
    f_log I filesystems_var_local certman "Creating certman directory"
    mkdir -p /var/local/certman
    chown framework /var/local/certman
    chmod 02775 /var/local/certman
  else
    # User and permissions could be incorrect due to any of 2 conditions:
    # 1. Shipmode / factory reset  when /var/local gets created from /opt/var/local
    # 2. Permissions are incorrect due to earlier bug
    perm=$(stat -c %a "/var/local/certman")
    user=$(stat -c %U "/var/local/certman")
    if [ "$perm" != "2775" -o "$user" != "framework" ]; then
       f_log E filesystems_var_local certman "Current user,permission = $user $perm. Updating user and permissions"
       # Handle directory attributes
       chown framework /var/local/certman
       chmod 02775 /var/local/certman
       # Handle files in directory. No sub-directories and hence no recursion.
       chmod u+rw /var/local/certman/*
       chown framework /var/local/certman/*
    fi
  fi

  if [ ! -f /var/local/certman/revoked.db ]; then
    f_log I filesystems_var_local certman "Preparing initial version of CRL database"
    cp /opt/var/local/certman/revoked.db /var/local/certman/
    chown framework /var/local/certman/revoked.db
  fi

  # see if the var local first boot file is present
  var_local_fb=$(kdb get system/driver/filesystem/LOCALVAR_FIRSTBOOT)
  if [ ! -e "${var_local_fb}" ]; then
    # see if the no transitions exists
    no_transitions_file=$(kdb get system/driver/filesystem/NO_TRANSITIONS)
    if [ ! -e "${no_transitions_file}" ]; then
        f_log I filesystems_var_local createnotransitions "file=${no_transitions_file}" "Creating no transitions file"
        touch $no_transitions_file
    else
        f_log I filesystems_var_local notransitionsexists "file=${no_transitions_file}" "Already exists"
    fi

    # No matter if it exists or not, write out the first boot file
    f_log I filesystems_var_local createvarlocalfirstboot "file=${var_local_fb}" "Creating var local first boot file"
    touch $var_local_fb
  fi
  # upstart hook potentially useful for OTA updates, the files will not be present on /var/local all the time.
  # Do not delete this code
  var_local_fixup=/var/local/system/fixup
  var_local_onetimefixup=/var/local/system/onetimefixup
  if [ -e $var_local_fixup ]; then
  	f_log I filesystems_var_local runfixup "Running $var_local_fixup"
  	$var_local_fixup
  fi
  if [ -e $var_local_onetimefixup ]; then
   	f_log I filesystems_var_local runonetimefixup "Running $var_local_onetimefixup"
  	$var_local_onetimefixup
  	rm $var_local_onetimefixup
  fi

  # Run vacumm on cc.db to compact it if needed
  set +e
  readonly CC_DB_PATH="/var/local/cc.db"
  readonly TMPFS_PATH="/var/ccdbcompaction"
  readonly TEMP_DB_PATH="$TMPFS_PATH/cc.db"
  free_pages=$(sqlite3 ${CC_DB_PATH} "PRAGMA freelist_count")
  page_size=$(sqlite3 ${CC_DB_PATH} "PRAGMA page_size")
  free_cc_db_size_in_bytes=`expr $free_pages \* $page_size`
  available_var_local_space_in_kb=$(df -P /var/local/ | awk 'NR==2 {print $4}')
  ONE_MB_IN_BYTES=`expr 1 \* 1024 \* 1024`
  THREE_MB_IN_BYTES=`expr 3 \* $ONE_MB_IN_BYTES`
  TEN_MB_IN_KB=`expr 10 \* 1024`
  f_log I filesystems_var_local "DB PARAMS" "FreePageSize:${free_cc_db_size_in_bytes} bytes. AvailableSpaceInVarLocal:${available_var_local_space_in_kb} KB."
  # We will do compaction if we can re-claim atleast 3MB or if we can re-claim atleast 1MB whenever the free space in /var/local is less than 10MB
  # TODO: This condition is based on heuristics. Once we get sufficient customer data, this condition needs to be re-visited.
  if [ $free_cc_db_size_in_bytes -gt $THREE_MB_IN_BYTES ] || ([ $free_cc_db_size_in_bytes -gt $ONE_MB_IN_BYTES ] && [ $available_var_local_space_in_kb -lt $TEN_MB_IN_KB ]); then
     mkdir -p $TMPFS_PATH
     mount -t tmpfs tmpfs $TMPFS_PATH
     cp $CC_DB_PATH $TEMP_DB_PATH
     size_of_db_before_compaction_in_kb=$(du -k $CC_DB_PATH | cut -f1)
     ccdbcleanup -f $TEMP_DB_PATH
     if [ $? -eq 0 ]; then
        mv $TEMP_DB_PATH $CC_DB_PATH
        size_of_db_after_compaction_in_kb=$(du -k $CC_DB_PATH | cut -f1)
        space_gained=`expr $size_of_db_before_compaction_in_kb - $size_of_db_after_compaction_in_kb`
        f_log I filesystems_var_local "VACUUM Succeeded" "Space Before:${size_of_db_before_compaction_in_kb} KB. Space After:${size_of_db_after_compaction_in_kb} KB. Space Gained:${space_gained} KB."
     else
        rm $TEMP_DB_PATH
        f_log E filesystems_var_local "VACUUM Failed" ""
     fi
     umount $TMPFS_PATH
  fi
  set -e

  # see if both cc.db is available and not dcm.db. In this case, the db is not yet 
  # migrated to support multiple profiles, so run ccdbcleanup with -c parameter to 
  # acheive this.
  # TODO: check if this could be extracted as a separate JOB, but make sure that it 
  # does not run in parallel with migrate.conf, else there are chances of db corruption
  if [ -f "/var/local/cc.db" -a ! -f "/var/local/dcm.db" ]; then	 
      f_log I filesystems_var_local "Starting Migration" "Preparing to move to multiple profiles model"
      mkdir -p "/var/local/cc/"
      set +e
      ccdbcleanup -f "/var/local/cc.db" -c
      set -e
  fi
 
  # see if the var local sqlite db upgrade file is present
  var_local_db_upgrade=/var/local/system/LOCALVAR_DBUPGRADE
  if [ ! -e "${var_local_db_upgrade}" ]; then
    #DB migration has not happened , trigger migrate_DB script to complete DB migration
    f_milestone  fs23
    f_emit migrate_DB
    f_log I filesystems_var_local createvarlocaldbupgrade "file=${var_local_db_upgrade}" "Creating var local db upgrade file"
    touch $var_local_db_upgrade
  else
    #DB upgrade has happened continue with usual flow
    f_milestone  fs23
    f_emit mounted_varLocal
  fi
	
  # Change ownership. This is essential for non-root processes to create files in /var/local directory.
  chown framework:javausers /var/local/ || true

  #Remove x-fsn completly
  if [ ! -e "/var/local/system/XFSN_DEPRECATED" ] ; then
    set +e
    f_log I filesystems_var_local "xfsn-deprecate" "start"
    rm -rf /var/local/java/prefs/cookies/864s3868916ns0qqp7p4q12o9p7086rr.txt*
    find /var/local/java/prefs/cookies/ -name "auth.cookies*" | xargs sed -i '/^x-fsn=/d' 
    find /var/local/mesquite/ -name "cookieJar" | xargs sed -i '/\tx-fsn\t/d'
    set -e
    touch /var/local/system/XFSN_DEPRECATED
    f_log I filesystems_var_local "xfsn-deprecate" "done"
  fi

  #Remove store owned AppCache
  if [ -e /var/local/mesquite/store/resource/appcache/ApplicationCache.db ]; then
    set +e
    rm -rf /var/local/mesquite/store/resource/appcache/ApplicationCache.db    
    rmdir --ignore-fail-on-non-empty -p /var/local/mesquite/store/resource/appcache/
    set -e
  fi

  f_milestone fs25
end script


post-stop script
  source /etc/upstart/functions
  
  f_log I filesystems_var_local "unmounting font files"
  mount | grep /var/local/font/mnt | cut -d " " -f1 | xargs umount  || true 
  # save logs before we lose varlocal
  f_log I filesystems_var_local rotate_log "Rotating Logs"
  tinyrot --force || true

  sync || true 
  echo 3 > /proc/sys/vm/drop_caches || true
  sync || true
  f_log I filesystems_var_local "filesystem sync done"

  f_log I filesystems_var_local unmount_varLocal "Unmounting VarLocal"
  umount /var/local
end script
