description "Intitates the OTA update process"

emits ota-update

export LANG LC_ALL

env BATTERY_MIN_CHARGE=15

env ERR_NONE=0
env ERR_BAD_ARG=1
env ERR_FILE_NOT_FOUND=2
env ERR_LOW_BAT=3
env ERR_BAD_FILE=4
env SKIP_BATTERY_CHECK_FOR_UPDATE="/mnt/us/system/SKIP_BATTERY_CHECK_FOR_UPDATE"

env LIBC_FATAL_STDERR_=1
env STDERR=/tmp/ota-update.err
env KEYS_PARTITION=/keys

pre-start script
	source /etc/upstart/functions

	[ -n "${BUNDLE}" ] || {
		f_log E ota-update check "" "BUNDLE not defined"
		return $ERR_BAD_ARG
	}

	[ -e "${BUNDLE}" ] || {
		f_log E ota-update check "" "No update file found"
		return $ERR_FILE_NOT_FOUND
	}

        # grep succeeds if there is a space before "/keys" and the line ends with "/keys"
        # This uniquely identifies keys partition in df output
        KEYS_PARTITION_PRESENT=$(df | grep " $KEYS_PARTITION$" || true)

        if [ -z $KEYS_PARTITION_PRESENT ]
        then
           f_log I ota-update check "" "/keys partition unmounted or missing before OTA update"
        else
           f_log I ota-update check "" "/keys partition mounted before OTA update"
           set +e
           f_log I ota-update check "" "Contents of /keys partition are: $(ls /keys)"
           set -e
        fi

	set +e
	BATTERY_CHARGE=$(gasgauge-info -s)
	ERROR_STATE=$?
	BATTERY_CHARGE=$(echo "${BATTERY_CHARGE}" | sed 's/\%//')
	set -e
	[ -n "${BATTERY_CHARGE}" -a ${ERROR_STATE} -eq $ERR_NONE ] || {
		f_log W ota-update check "" "Gas guage info not available"
		BATTERY_CHARGE=0
	}
	
	set +e
	if [ "$(devcap-get-feature -a battery.high_impedance_below_10degc)" -eq "1" ]; then
	    BATTERY_LOW_TEMPERATURE_THRESHOLD=$(get-dynconf-value primary.batt.low.temperature.threshold)
	    if [ "$(lipc-get-prop com.lab126.powerd battTemperature)" -le "$BATTERY_LOW_TEMPERATURE_THRESHOLD" ] ; then
	        BATTERY_THRESHOLD=$(get-dynconf-value update.battery.high.impedance.threshold)
	    else
	        BATTERY_THRESHOLD=$(get-dynconf-value update.battery.threshold)
	    fi
	else
	    BATTERY_THRESHOLD=$(get-dynconf-value update.battery.threshold)
	fi
	ERROR_STATE=$?
	set -e
	if [ ${ERROR_STATE} -ne $ERR_NONE ] 
	then
		BATTERY_THRESHOLD=$BATTERY_MIN_CHARGE
	fi
	[ ${BATTERY_CHARGE} -ge ${BATTERY_THRESHOLD} -o -n "${FORCE}" -o -f "${SKIP_BATTERY_CHECK_FOR_UPDATE}" ] || {
		MESSAGE="Inadequate battery charge, must be "
		MESSAGE="${MESSAGE} ${BATTERY_THRESHOLD} % or higher, "
		MESSAGE="${MESSAGE} currently at ${BATTERY_CHARGE} %"
		f_log W ota-update check "" "${MESSAGE}"
		return $ERR_LOW_BAT
	}

	return $ERR_NONE
end script

script
	source /etc/upstart/functions
	source /etc/upstart/bundlefuncs
	source /etc/upstart/blanket_functions
        source /usr/bin/record_device_metric.sh

	DO_REBOOT="false"
	
	set +e
	parse_bundle "${BUNDLE}"
	fsync "${BUNDLE}"
	
	case "${OTA_VERSION}" in
		SP01)
			parse_bundle "${BUNDLE}" "${OTA_BLOCKSIZE}"
			
			case "${OTA_VERSION}" in
				FB02) DO_REBOOT="true" ;;
				FB03) record_device_metric ota-update script OTAReboot 1 '' $METRIC_PRIORITY_LOW $METRIC_TYPE_COUNTER 
				      DO_REBOOT="true" ;;
			esac
			;;
		
		FB02) DO_REBOOT="true" ;;
	esac
	set -e
        source /etc/sysconfig/paths 
        if [ -e $FLAG_VFAT_FSCK ]; then
           f_log I ota-update found_fsck_flag "" "Found FSCK flag file"
           umount /mnt/base-us || true
           fsck -vV /dev/loop/0  || true
           mount /dev/loop/0  /mnt/base-us || true
        fi
 
	
	[ "$DO_REBOOT" == "true" ] && {
		# Load the blanket shutdown module and display reboot screen.
		f_blanket_load_module shutdown
		lipc-send-event com.lab126.hal.shutdown showScreen -s reboot
		reboot
		sleep 20
		return 0
	}
        
        # stop framework before emitting ota-update event as it causes
        # some daemons to stop before cvm and it leads to lipc exceptions
        stop framework	
	# Issue the ota-update signal and wait for completion.
	initctl emit ota-update
	exec /usr/sbin/otaup "${BUNDLE}" > /dev/console 2>> $STDERR
end script

post-stop script
        source /etc/upstart/functions
        libc_scan
end script
