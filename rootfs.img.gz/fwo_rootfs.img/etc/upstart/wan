#! /bin/sh
#
# /etc/upstart/wan (fastpath anyway) checked for file and fw version ok.
# it appears to want to leave power off.

source /etc/upstart/functions

# state is set up in /var/local/wan/info
# it is sampled from the device as a side effect of "wanon"
# generated by "waninfo":

#WAN_INFO_VERSION=5
#WAN_TYPE=6
#WAN_PROVIDER=2
#WAN_CARRIER=2
#WAN_PEER=3
#WAN_FW_VERSION=L816_V1A.0D.01.11
#WAN_INFO_UID=0306


WOPT=/opt/wan
WLOCAL=/var/local/wan
WINFO=$WLOCAL/info
WAN_MODULE_INFO_GEN=/usr/sbin/waninfo
FW_UPDATE_FAILED=$WLOCAL/FW_UPDATE_FAILED
MODEMCMD=/usr/sbin/modemcmd
COREDUMP_ENABLED=$WLOCAL/COREDUMP_ENABLED

WANON=
WANOFF_SAFELY=0
DO_MRU_CLEAR=0  # Workaround for BANFF-101

# make sure return is true if the control is correct

won() {
    f_log I wan on
    if [ -n "$WANON" ] || wancontrol wanon ; then
        WANON=yes
    fi
}

woff() {
    f_log I wan off
    if [ -z "$WANON" ] || wancontrol wanoff ; then
        WANON=
    fi
}

woffkill() {
    f_log I wan off kill
    if [ -z "$WANON" ] || wancontrol wanoffkill ; then
        WANON=
    fi
}

die() {
    f_log E wan $1
    if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
        mkdir -p ${WLOCAL}
        touch ${FW_UPDATE_FAILED}
    fi
    woffkill
    exit 1
}

if [ -f "$FW_UPDATE_FAILED" ]; then
    f_log I wan start_recovery
    if [ "$(f_platform)" = "zelda" ]; then
        if [ "$(f_board)" = "cognac" ]; then
            f_log I wan "WAN module is Banff"
            WAN_TYPE=6
            WAN_FW_VERSION=L816_V1A.0D.00.00
        else
            _v_id=`cat /proc/board_id | cut -c 4-6`
            case ${_v_id} in
                1CB | 1JK | 1K4 | 1KE | 1KF | 1M2 | 1MS | 1NB | 1PP | 1QM | 1S2)
                    f_log I wan "WAN module is Solden"
                    WAN_TYPE=7
                    WAN_FW_VERSION=18106.5009.00.00.00.00
                    ;;
                # 1C9 | 1JJ | 1K3 | 1L0 | 1M1 | 1MT | 1PN | 1QL | 1S1)
                *)
                    f_log I wan "WAN module is Banff"
                    WAN_TYPE=6
                    WAN_FW_VERSION=L816_V1A.0D.00.00
                    ;;
              esac
        fi
    elif [ "$(f_platform)" = "rex" ]; then
        _v_id=`cat /proc/board_id | cut -c 4-6`
        case ${_v_id} in
            1EQ | 1F4 | 1G9)
                f_log I wan "WAN module is Solden"
                WAN_TYPE=7
                WAN_FW_VERSION=18106.5009.00.00.00.00
                ;;
            # 15S | 1AF | 1EA | 1F1 | 1F5)
            *)
                f_log I wan "WAN module is Banff"
                WAN_TYPE=6
                WAN_FW_VERSION=L816_V1A.0D.00.00
                ;;
        esac
    fi
else
    # if we don't have the file, use wanon to generate it
    # refactor wancontrol so we build the file with waninfo
    if [ ! -f "$WINFO" ]; then
        f_log I wan create_info
        won || die info_power_up
        DO_MRU_CLEAR=1
        # Deregister from the network to prevent further restoring and reselection to the network after MRU clear.
        ${MODEMCMD} -t 40 -e -q -r 1 -c "AT+COPS=2"
        if [ $? -ne 0 ]; then
            f_log E wan "Deregistration failed!"
            # Send a simple dummy command with a short timeout.
            # The modem aborts the ongoing +COPS=2 command and returns "ABORTED".
            ${MODEMCMD} -t 1 -e -n -q -r 1 -c "ATE0"
            sleep 1
        fi
    fi
    [ -f "$WINFO" ] && source $WINFO
fi

# make sure we have the file and required contents
[ -n "$WAN_TYPE" -a -n "$WAN_FW_VERSION" ] || die bad_info

f_log I wan "type=$WAN_TYPE,version=$WAN_FW_VERSION"

WFW=$WOPT/firmware/mt-$WAN_TYPE
VER_DAT=${WFW}/version.dat
SAME_VER=0

# if there is a firmware dir, we should see that we have the right version
if [ -d ${WFW} -a -e ${VER_DAT} ] ; then
    LC=`cat ${VER_DAT} | wc -l`
    I=0
    while [ ${I} -lt ${LC} ]; do
        read L
        if [ -n "${L}" ]; then
            NEW_VER=`echo ${L} | awk '{ print $1 }'`
            if [ -n "${NEW_VER}" ]; then
                if echo "$WAN_FW_VERSION" | grep -q "$NEW_VER"; then
                    SAME_VER=1
                    break;
                fi
            fi
        fi
        I=$((${I} + 1))
    done <${VER_DAT}

    if [ $SAME_VER -eq 0 ]; then
        f_log I wan "update from=$WAN_FW_VERSION,to=$NEW_VER"
        WANOFF_SAFELY=1
        if $WFW/verify $WFW ; then
            if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
                # fake turn on wan. DownloadTool will turn on wan
                WANON=yes
            else
                won || die update_power_up
            fi
            if $WFW/flash $WFW ; then
                f_log I wan "updated version=$NEW_VER"
                sleep 7
                if [ -f $WFW/post-init ]; then
                    f_log I wan "post initialization"
                    $WFW/post-init || die post_init_fail
                fi
                if [ "$(f_platform)" != "zelda" -a "$(f_platform)" != "rex" ]; then
                    wancontrol wanoffkill
                fi
                rm -f ${WINFO}
                rm -f $WLOCAL/sar_tbl
                if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
                    f_log I wan "generate info file..."

                    if $WAN_MODULE_INFO_GEN -q -r 1 ; then
                        f_log I wan "generate info file done"
                    else
                        die gen_info_fail
                    fi
                else
                    wancontrol wanon    # rebuilds info as a side effect
                fi
            else
                die update_fail
            fi
        else
            f_log E wan "verify_failed"
            woffkill
            exit 1
        fi
    else
        f_log I wan "up to date"
    fi
fi

if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
    rm -f ${FW_UPDATE_FAILED}
fi

# disable coredump function
if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
    if [ -f "$COREDUMP_ENABLED" ]; then
        f_log I wan "Disable coredump function"
        won
        ${MODEMCMD} -t 5 -e -q -r 1 -c "AT+GTSET=\"SWCOREDUMP\",0"
        if [ $? -eq 0 ]; then
            rm -f ${COREDUMP_ENABLED}
        else
            f_log E wan "Disable coredump failed!"
        fi
    fi
fi

DO_SAR_TBL_UPDATE=1

# SAR table setting for Cognac, Moonshine, and Stinger devices
if [ "$(f_board)" = "cognac" -o "$(f_board)" = "moonshine" -o "$(f_board)" = "stinger" ]; then
    SAR_TBL_VER="0"

    if [ "$(f_board)" = "cognac" ]; then
######################################################
#SAR_TABLE_VERSION   1
#   ATT :
#       N/A
#   VFG :
#       GSM 1800 2up: 24.0dBm, 1up: 27.0dBm
#       WCDMA I: 18.0dBm
#   DCM :
#       WCDMA I: 18.0dBm
######################################################
        SAR_TBL_VER=1
    elif [ "$(f_board)" = "moonshine" ]; then
######################################################
#SAR_TABLE_VERSION 1
#   ATT :
#       N/A
#   VFG/DCM :
#       GSM 900  2up: 27.0dBm, 1up: 30.0dBm
#       GSM 1800 2up: 25.5dBm, 1up: 28.5dBm
#       WCDMA I: 19.5dBm
#       WCDMA VI: 22.0dBm
#       WCDMA VIII: 20.5dBm
#       LTE B1: 19.5dBm
#       LTE B3: 19.0dBm
#       LTE B8: 21.0dBm
#       LTE B20: 21.5dBm
#
#SAR_TABLE_VERSION 2
#   ATT :
#       N/A
#   VFG/DCM :
#       GSM 900  2up: 27.0dBm, 1up: 30.0dBm
#       GSM 1800 2up: 25.5dBm, 1up: 28.5dBm
#       WCDMA I: 19.5dBm
#       WCDMA V: 22.0dBm
#       WCDMA VI: 22.0dBm
#       WCDMA VIII: 20.5dBm
#       LTE B1: 19.5dBm
#       LTE B3: 19.5dBm
#       LTE B8: 21.0dBm
#       LTE B20: 21.5dBm
#       Max power reduction
#           LTE   B8: 22.0dBm (value = 352)
#           LTE  B20: 22.5dBm (value = 360)
#           WCDMA B8: 22.0dBm (value = 352)
#           GPRS 900: 31.75dBm (value = 508)
######################################################
        SAR_TBL_VER=2
    elif [ "$(f_board)" = "stinger" ]; then
######################################################
#SAR_TABLE_VERSION   1
#   ATT :
#       N/A
#   VFG/DCM :
#       GSM 1800 1up: 28.0dBm
#       GSM 1800 2up: 25.0dBm
#       WCDMA I: 19.0dBm
#       LTE B1: 19.0dBm
#       LTE B3: 19.0dBm
######################################################
        SAR_TBL_VER=1
    fi

    if [ -f $WLOCAL/sar_tbl ]; then
        SAR_TBL_VER_FILE=`head -n1 $WLOCAL/sar_tbl`
        if [ "$SAR_TBL_VER_FILE" == "$SAR_TBL_VER" ]; then
            DO_SAR_TBL_UPDATE=0
        fi
    fi

    if [ $DO_SAR_TBL_UPDATE -ne 0 ]; then
        f_log I wan "create sar table..."
        WANOFF_SAFELY=1
        rm -f $WLOCAL/sar_tbl
        won

        SAR_ERROR=0
        CIMI=`${MODEMCMD} -t 5 -e -v -q -r 1 -c "AT+CIMI" | head -n1 | awk '{ print $2 }'`

        # clear sar table first
        # it requres a module power cycle to take effect. Otherwise +BODYSARON command will be failed.
        ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSARCLEAR"
        if [ $? -ne 0 ]; then
            f_log E wan "clear sar table failed!"
            SAR_ERROR=1
        fi

        if [ "$(f_board)" = "cognac" ]; then
            case "$CIMI" in
                # Vodafone
                23415* | 20404*)
                    # BODYSAR
                    # GSM 1800 2up: 24.0dBm, 1up: 27.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=0,240,\"0x4\",2,270,\"0x4\",1"
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table GSM failed!"
                        SAR_ERROR=1
                    fi
                    # WCDMA I: 18.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=1,180,\"0x1\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table WCDMA failed!"
                        SAR_ERROR=1
                    fi
                    ;;
                # Docomo
                44010*)
                    # BODYSAR
                    # WCDMA I: 18.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=1,180,\"0x1\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table WCDMA failed!"
                        SAR_ERROR=1
                    fi
                    ;;
            esac
        elif [ "$(f_board)" = "moonshine" ]; then
            case "$CIMI" in
                # Vodafone and Docomo
                23415* | 20404* | 44010*)
                    # BODYSAR
                    # GSM 900  2up: 27.0dBm, 1up: 30.0dBm
                    # GSM 1800 2up: 25.5dBm, 1up: 28.5dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=0,270,\"0x2\",2,300,\"0x2\",1,255,\"0x4\",2,285,\"0x4\",1"
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for GSM failed!"
                        SAR_ERROR=1
                    fi
                    # WCDMA I: 19.5dBm, V: 22.0dBm, VI: 22.0dBm, VIII: 20.5dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=1,195,\"0x1\",220,\"0x10\",220,\"0x20\",205,\"0x80\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for WCDMA failed!"
                        SAR_ERROR=1
                    fi
                    # LTE B1: 19.5dBm, B3: 19.5dBm, B8: 21.0dBm, B20: 21.5dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=2,195,\"0x1\",195,\"0x4\",210,\"0x80\",215,\"0x80000\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for LTE failed!"
                        SAR_ERROR=1
                    fi

                    # Max Power Reduction
                    # GSM  900: 31.75dBm (value = 508)
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT@NVM:FIX_2G_DRV.TX_FIX.TARGET_GMSK_OUTPUT_POWER[0,79]={518,518,518,518,518,518,496,464,432,400,368,336,304,272,240,208,176,144,116,92,508,508,508,508,508,508,496,464,432,400,368,336,304,272,240,208,176,144,116,92,474,448,406,384,352,320,288,256,224,192,160,128,96,64,40,16,0,0,0,0,472,448,406,384,352,320,288,256,224,192,160,128,96,64,40,16,0,0,0,0}"
                    if [ $? -eq 0 ]; then
                        ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT@NVM:STORE_NVM(FIX_2G_DRV)"
                        if [ $? -ne 0 ]; then
                            f_log E wan "store NVM(FIX_2G_DRV) failed!"
                            SAR_ERROR=1
                        fi
                    else
                        f_log E wan "max power reduction for GPRS failed!"
                        SAR_ERROR=1
                    fi
                    # WCDMA B8: 22.0dBm (value = 352)
                    # LTE   B8: 22.0dBm (value = 352), B20: 22.5dBm (value = 360)
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT@NVM:FIX_S4G_LUT.TX.TX_CONFIG_TABLE[0,19].TX_MAX_PWR={376,376,376,376,352,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}"
                    if [ $? -eq 0 ]; then
                        ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT@NVM:FIX_S4G_LUT.TXLTE.TXLTE_CONFIG_TABLE[0,19].4G_TX_MAX_PWR={368,368,368,368,368,352,368,368,368,360,0,0,0,0,0,0,0,0,0,0}"
                        if [ $? -eq 0 ]; then
                            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT@NVM:STORE_NVM(FIX_S4G_LUT)"
                            if [ $? -ne 0 ]; then
                                f_log E wan "store NVM(FIX_S4G_LUT) failed!"
                                SAR_ERROR=1
                            fi
                        else
                            f_log E wan "max power reduction for LTE failed!"
                            SAR_ERROR=1
                        fi
                    else
                        f_log E wan "max power reduction for WCDMA failed!"
                        SAR_ERROR=1
                    fi
                    ;;
            esac
        elif [ "$(f_board)" = "stinger" ]; then
            case "$CIMI" in
                # Vodafone and Docomo
                23415* | 20404* | 44010*)
                    # BODYSAR
                    # GSM 1800 2up: 25.0dBm
                    # GSM 1800 1up: 28.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=0,250,\"0x4\",2,280,\"0x4\",1"
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for GSM failed!"
                        SAR_ERROR=1
                    fi
                    # WCDMA I: 19.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=1,190,\"0x1\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for WCDMA failed!"
                        SAR_ERROR=1
                    fi
                    # LTE B1: 19.0dBm, B3: 19.0dBm
                    ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+BODYSAR=2,190,\"0x1\",190,\"0x4\""
                    if [ $? -ne 0 ]; then
                        f_log E wan "set sar table for LTE failed!"
                        SAR_ERROR=1
                    fi
                    ;;
            esac
        fi
        if [ $SAR_ERROR -eq 0 ]; then
            echo $SAR_TBL_VER > $WLOCAL/sar_tbl
            if [ -f $WLOCAL/sar_tbl ]; then
                f_log I wan "sar table created"
            else
                f_log E wan "sar table create failed!"
            fi
        fi
    fi
fi

# Mitigation JTWELVE-170
if [ "$(f_board)" = "stinger" ]; then
    _v_dsn_cccuu=`cat /proc/serial | cut -c 4-8`
    _v_psn_cccuu=`cat /proc/board_id | cut -c 4-8`
    if [ "${_v_dsn_cccuu}" = "0WQ01" -a "${_v_psn_cccuu}" = "1K401" ]; then
        won
        PREF_BAND_DEF="900,1800,1900,850,1,2,5,6,8,101,102,103,104,105,108,109,112,119,120"
        PREF_BAND=`${MODEMCMD} -t 5 -e -v -q -r 1 -c "AT*PREFBAND?" | head -n1 | awk '{ print $2 }'`
        if [ "${PREF_BAND}" = "${PREF_BAND_DEF}" ]; then
            f_log I wan "remove LTE bands from the preferred band list"
            WANOFF_SAFELY=1
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT*TESTMODE=1"
            if [ $? -ne 0 ]; then
                f_log E wan "AT*TEST_MODE failed!"
            fi
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT*PREFBAND=900,1800,1900,850,1,2,5,6,8"
            if [ $? -ne 0 ]; then
                f_log E wan "AT*PREFBAND failed!"
            fi
        fi
    fi
fi

# turn it off if we turned it on
if [ "$(f_platform)" = "zelda" -o "$(f_platform)" = "rex" ]; then
    if [ $DO_MRU_CLEAR -ne 0 ]; then
        f_log I wan "mruclear"
        WANOFF_SAFELY=1
        ${MODEMCMD} -t 5 -e -q -r 1 -c "AT*MRUCLEAR"
        if [ $? -ne 0 ]; then
            f_log E wan "mruclear failed!"
        fi
        # Workaround for JTEN-1369, UTP GHT00121419. These are required for Banff. Solden has fixed FW.
        if [ $WAN_TYPE -eq 6 ]; then
            f_log I wan "clear XNVMMCC list"
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+XNVMMCC=0"
            if [ $? -ne 0 ]; then
                f_log E wan "AT+XNVMMCC=0 failed!"
            fi
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+XNVMPLMN=0,0"
            if [ $? -ne 0 ]; then
                f_log E wan "AT+XNVMPLMN=0,0 failed!"
            fi
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+XNVMPLMN=0,1"
            if [ $? -ne 0 ]; then
                f_log E wan "AT+XNVMPLMN=0,1 failed!"
            fi
            ${MODEMCMD} -t 5 -e -n -q -r 1 -c "AT+XNVMPLMN=0,2"
            if [ $? -ne 0 ]; then
                f_log E wan "AT+XNVMPLMN=0,2 failed!"
            fi
        fi
    fi

    # Power off safely to prevent corruption of filesystem and NV.
    if [ $WANOFF_SAFELY -ne 0 ]; then
        woff
    else
        woffkill
    fi
else
    woffkill
fi

exit 0
