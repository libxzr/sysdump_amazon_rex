# basic system setup, including udev

start on startup

# we're going to export these all the way down the tree
# until we find a way to get upstart to do global environ
env LANG=en_US.UTF-8
env LC_ALL=en_US.UTF-8
export LANG LC_ALL

env READ_AHEAD=4
env IO_SCHED=anticipatory
env TMP_SIZE=32M

env LIBC_FATAL_STDERR_=1
env STDERR=/tmp/system.err


expect fork

pre-start script
  source /etc/upstart/functions

# it appears that upstart does this for us (this week).  check anyway

  [ -d /proc/1 ] || mount /proc
  f_log I sytem mounted_proc 

  [ -d /sys/kernel ] || mount /sys
  f_log I system mounted_sys

# Set the minimum free size the Kernel VM is gonna try to keep a little over 4MB
  echo 4160 > /proc/sys/vm/min_free_kbytes

# Reliable way to get post-OOM usage information, despite presence of
# certain kinds of runaway allocators of memory.
  echo 1 > /proc/sys/vm/oom_dump_tasks

# NOCHECKIN : enable debug output for upstart
#  initctl log-priority debug

# this is the last kernel milestone (/tmp isn't there yet), so do it by hand.
# After this, our milestones go to /tmp

  echo -n sy00 > /proc/bd/boot_milestone
  f_log I system sy00

# Initiating performance mode in device for boot operations, including framework
# start. Device will go into ondemand mode, once Home load is complete
  echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor


# udev appears to duplicate a lot of this, not sure anything other than
# the mount and udev dirs are necessary.

  mount -o mode=755 -t tmpfs tmpfs /dev

# /dev/shm -> tmpfs isn't required for SYSV shared memory, but is for POSIX.

  cd /dev
  mkdir -p .udev/db .udev/queue pts shm loop net

  mount -t tmpfs tmpfs /dev/shm
  mount /dev/pts

  ln -s /proc/self/fd fd
  ln -s /proc/self/fd/0 stdin
  ln -s /proc/self/fd/1 stdout
  ln -s /proc/self/fd/2 stderr

  mknod console c 5 1

  mknod null c 1 3
  mknod zero c 1 5
  mknod random c 1 8
  mknod urandom c 1 9

  mknod ppp c 108 0
  mknod loop/0 b 7 0
  mknod net/run c 10 200

  # Create extra loop mount points for cramfs use
  #If you are changing this number make sure you update get_free_loop_device utitlity as well
  #TODO: move this number to a common config file
  numLoopMntsNeeded=16
  
  loopNum=$(($(ls /dev/loop* | tail -c 2)+1))
  maxLoop=$(($numLoopMntsNeeded+$loopNum))
  while [ $loopNum -lt $maxLoop ]; do
    mknod /dev/loop/$loopNum b 7 $loopNum
    loopNum=$(($loopNum+1))
  done
# Note that the above routine needs to happen before the firsttime script is run
# as kdb.src is loopback mounted.

# things we want to do once (and only once) to a RW "/"
  [ -x /etc/upstart/firsttime ] && /etc/upstart/firsttime

# TODO - make fstab say it's read-only
  mount -o ro,remount /

  f_log I system mounted_dev

# var is ephemeral, but we pre-populate it from the build and create
# some directories we always want there  (should just put them in the build...)
# /var/local will eventually get the persistent RW store.

  f_milestone 49.1
  mount -t tmpfs tmpfs /mnt/rwfs -o size=$TMP_SIZE
  cp -a -f /var/. /mnt/rwfs/.
  f_milestone 49.2
  mount --move /mnt/rwfs /var
  f_milestone 49.3

  # create tmpfs directory for yj if this is device is not a 256MB memory device
  MEMTOTAL=$(cat /proc/meminfo  | grep MemTotal | sed 's/[^0-9]*//g')
  if [ "$MEMTOTAL" -ge 475000 ]; then
    if [ -d "/mnt/kfxcache/" ]; then
      mount -t tmpfs tmpfs /mnt/kfxcache -o size=250M;
    fi
  fi

  for i in cache lib lock log run tmp local; do
    mkdir -p /var/$i
  done

  f_milestone 49.4
  
# creating a new folder to maintain timestamp which records heartbeat of powerd
  mkdir -p /var/run/timestamp
  
# pushing the fontconfig cache in /var
  mkdir -p /var/cache/fontconfig/
  cp -a /opt/var/cache/fontconfig/* /var/cache/fontconfig/

# some other things that live in "/tmp" (should be in build, since /var populates /var/tmp)
  f_milestone 49.5

  mkdir -p /tmp/root /tmp/framework
  chmod 777 /tmp
  chmod 700 /tmp/root
  
  head -c 32 /dev/urandom | base64 | tr -d '\n' > /tmp/session_token
  chmod 644 /tmp/session_token

  f_log I sytem mounted_tmpfs

  for i in /sys/block/*/queue; do
    echo $READ_AHEAD > $i/read_ahead_kb
	if [ "$(f_platform)" == "yoshi" || "$(f_platform)" == "yoshime3" ]; then
		echo $IO_SCHED > $i/scheduler
	fi
  done

# let syslog know that var/dev is available so we get udev messages

  f_milestone sy50
  f_log I system start time=$(f_ms)

  echo 5 >  /proc/cpu/alignment

  proto=Y ; wifi=Y ; wan=Y
  f_wifi || wifi=N
  f_wan || wan=N
  f_log I system config "platform=$(f_platform),board=$(f_board),rev=$(f_rev),proto=$proto,wifi=$wifi,wan=$wan" || true
end script

exec udevd --daemon 2>> $STDERR

#
# follow-up once udev is in place - let the dust settle and finish
# any device related init
#
post-start script
  source /etc/upstart/functions

  f_milestone sy51

  udevadm trigger
  udevadm settle --timeout=300

# set clock from hardware
# TODO - should have timestamp save in /var/local someplace too.

  hwclock -u -s

  # Default kindle epoch time is stored in /etc/epoch.txt.
  # If the current date is less than kindle epoch, update to kindle epoch.
  if [ -f /etc/epoch.txt ]; then
    _EPOCH=$(cat /etc/epoch.txt)
    if [ "$(date -u +%s)" -lt "$(date -u +%s -D '%Y-%m-%d %H:%M%Z' -d "${_EPOCH}")" ]; then
      date -u -D '%Y-%m-%d %H:%M%Z' -s "${_EPOCH}"
      if [ "$(f_platform)" = "wario" || "$(f_platform)" = "duet" ]; then
        hwclock -w
      fi
      if [ "$(f_platform)" = "rex" ]; then
        hwclock -u -w
      fi
    fi
  fi

  # Stamp the OTATimeStamp into /etc/
  if [ ! -f /etc/OTATimeStamp ]; then
    #Mouting root RW
    mount -o rw,remount /

    [ $? == 0 ] && echo "`date +%s`000" > /etc/OTATimeStamp

    #Mounting root RO
    mount -o ro,remount /
  fi

  f_milestone sy99
  f_log I system done time=$(f_ms)
end script

post-stop script
  source /etc/upstart/functions
  libc_scan
end script
