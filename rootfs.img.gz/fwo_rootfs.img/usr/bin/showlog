#!/bin/sh

CONF=/etc/tinyrot.conf
NEXTFILETOSEND=/var/local/log/nexttosendfile
LASTFILESENT=/tmp/lastsentfile

_DEVTYPE=/etc/sysconfig/devtypes
[ -f $_DEVTYPE ] && . $_DEVTYPE

_FEATURE=/etc/rc.d/features
[ -f $_FEATURE ] && . $_FEATURE
# -----------------------------------------------------------------------------
# functions
# -----------------------------------------------------------------------------

print_usage () {
    echo "showlog will print all available logs, including old rotated logs"
    echo "Usage:"
    echo "showlog [-f [logfile] | -o <outfile> [logfile] | -s | -g [logfile] | -p [logfile] | -n <outfile> [logfile] | -w <outfile> [logfile]] "
    echo "    -f <logfile>    follow log (tail -f) (default: logfile=/var/log/messages)"
    echo "    -g <logfile>    follow log (tail -f) (default: logfile=/var/log/netlog)"
    echo "    -p <logfile>    follow log (tail -f) (default: logfile=/var/log/wpa_supplicant)"
    echo "    -b <logfile>    follow log (tail -f) (default: logfile=/var/log/bsa_server_log)"
    echo "    -o <outfile>    cat all available syslog logfile(s) to outfile (default: outfile=/dev/stdout)"
    echo "    -n <outfile>    cat all available netlog logfile(s) to outfile (default: outfile=/dev/stdout)"
    echo "    -w <outfile>    cat all available wlan supplicant logfile(s) to outfile (default: outfile=/dev/stdout)"
    echo "    -z <outfile>    cat all available bsa server logfile(s) to outfile (default: outfile=/dev/stdout)"
    echo "    -s              cat the zipped log files with special headers to pipe to the server"
    echo "      --full           sending all available logs"
    echo "      --fsn            sending logs for Customer Service (non anonymously)"
    echo "    logfile         logfile to show (default: logfile=messages)"
    echo ""
    echo "NOTE: Don't use the full path. Just mention the file name"
    echo "Example: showlog messages"
    exit 1
}

print_stream_header () {
    NUMFILES=$1
    echo "MFBS/1.0 $NUMFILES"
    echo ""
}

print_gzip_header () {
    if [ -z "$1" -o -z "$2" ]; then
        echo "showlog: print_gzip_header: incorrect arguments"
        exit
    fi
    CONTENTLENGTH="$1"
    CONTENTNAME="$2"
    echo "Content-Length: $CONTENTLENGTH"
    echo "Content-Name: $CONTENTNAME"
    echo "Content-Type: GZIP"
    echo "Content-Encoding: GZIP"
    name=$(productid)
    echo "X-DeviceType: $(eval echo \\\${DEVTYPE_$name})"

    # Convert 046-shasta-049566 to 495660046
    # Convert eng-shasta-049566 to 495660000
    #
    # first s/// converts eng- to 0-
    # second s/// extracts first and last segment, ignoring leading 0s
    # printf puts them back together with correct number of 0s
    echo "X-DeviceFirmwareVersion:$(printf "%u%04u" $(cat /etc/version.txt | grep Version | awk '{ print $4 }' | sed 's/^[^\-]*[^0-9\-][^\-]*-/0-/; s/0*\([0-9]\+\)-.*-0*\(.\+\)/\2 \1/'))"
}

print_gzip_header_dsn () {
    print_gzip_header "$1" "$2"
    echo "X-DSN: $(cat /proc/usid)"
    echo ""
}

print_gzip_header_anon () {
    print_gzip_header "$1" "$2"
    echo "X-Anonymous-Tag: $(cat /etc/guid)"
    echo ""
}

print_gzip_files_anon () {
    ALLFILES=$*
    for FILE in $ALLFILES
    do
        CONTENTNAME=$FILE
        CONTENTLENGTH=$(ls -l $FILE | awk '{print $5}')
        print_gzip_header_anon $CONTENTLENGTH $CONTENTNAME
        # NOTE: cat'ing raw gzip file
        cat $FILE
    done
}

print_gzip_files_dsn () {
    ALLFILES=$*
    for FILE in $ALLFILES
    do
        CONTENTNAME=$FILE
        CONTENTLENGTH=$(ls -l $FILE | awk '{print $5}')
        print_gzip_header_dsn $CONTENTLENGTH $CONTENTNAME
        # NOTE: cat'ing raw gzip file
        cat $FILE
    done
}

on_kill() {                                             
  [ $TAILSID ] && pkill -TERM -s $TAILSID                               
  exit 0
}                                   

# -----------------------------------------------------------------------------
# main
# -----------------------------------------------------------------------------

[ -f $CONF ] && . $CONF

if [ x$1 == "x--help" -o x$1 == "x-h" ]; then
    print_usage
    exit 1
fi

# -----------------------------------------------------------------------------
# parse args
# -----------------------------------------------------------------------------

OUTFILE=/dev/stdout
GZIP_HEADER_TYPE=print_gzip_files_anon
SENDING_GZIP=
SENDING_FULL=0
NO_HEADERS=0
LOG="messages"

while [ -n "$1" ]; do
    __ARG=
    case $1 in
        -f )
            if [ -z "$2" ]; then
                LOG="messages"
            else
                LOG="$2"
            fi

            # follow by name so rotation doesn't fool us
            # Run it through parselog so unparsable lines are identified

# PH-1411 - "killall showlog" doesn't work when we're backgrounded - the SIGTERM
# hits us but not the pipeline below us.  We use the face that SID == PID to kill
# anything in this pipe in "on_kill" above us.

           trap on_kill TERM INT HUP
           exec setsid sh -c "exec tail -F /var/log/$LOG | exec /usr/bin/parselog" & TAILSID=$!
           wait
            ;;
        -g )
            shift
            if [ -z "$1" ]; then
                LOG="netlog"
            else
                LOG="$1"
            fi
           trap on_kill TERM INT HUP
           exec setsid sh -c "exec tail -F /var/log/$LOG | exec /usr/bin/parselog" & TAILSID=$!
           wait
            ;;
        -p )
            shift
            if [ -z "$1" ]; then
                LOG="wpa_supplicant"
            else
                LOG="$1"
            fi
           trap on_kill TERM INT HUP
           exec setsid sh -c "exec tail -F /var/log/$LOG | exec /usr/bin/parselog" & TAILSID=$!
           wait
            ;;
        -b )
            shift
            if [ -z "$1" ]; then
                LOG="bsa_server_log"
            else
                LOG="$1"
            fi
           trap on_kill TERM INT HUP
           exec setsid sh -c "exec tail -F /var/log/$LOG | exec /usr/bin/parselog" & TAILSID=$!
           wait
            ;;
        -o )
            shift
            if [ -n "$1" ]; then
                OUTFILE="$1"
                shift
            fi
            echo "" > "$OUTFILE" 2>/dev/null
            loginfo kitchensink
            ;;
        -n )
            shift
	    LOG="netlog"
            if [ -n "$1" ]; then
                OUTFILE="$1"
                shift
            fi
            echo "" > "$OUTFILE" 2>/dev/null
            ;;
        -w )
            shift
	    LOG="wpa_supplicant"
            if [ -n "$1" ]; then
                OUTFILE="$1"
                shift
            fi
            echo "" > "$OUTFILE" 2>/dev/null
            ;;
        -z )
            shift
	    LOG="bsa_server_log"
            if [ -n "$1" ]; then
                OUTFILE="$1"
                shift
            fi
            echo "" > "$OUTFILE" 2>/dev/null
            ;;
        -s )
            SENDING_GZIP=1
            shift
            ;;
        --full )
            SENDING_FULL=1
            shift
            ;;
        --fsn )
            GZIP_HEADER_TYPE=print_gzip_files_dsn
            shift
            ;;
        -h | --help )
            print_usage
            exit
            ;;
        * )
            LOG="$1"
            shift
            ;;
    esac
    SHOWLOG_ARGS=$__ARGS
done


# -----------------------------------------------------------------------------
# calculate the number of files to send/show (NUMFILES) and their names
# (ALLFILES)
# -----------------------------------------------------------------------------
NUMFILES=0
ALLFILES=
KINDLE_STATUS_MESSAGE_LOG_ZIP=/var/local/log/messages_kindle_status.gz
KINDLE_STATUS_MESSAGE_LOG=/var/local/log/KindleStatusFile

# prevent tinyrot from running, and do not run while tinyrot is running
# No-root users need write access to this lock file, since this script is being invoked
# in the context of the applications running.
mode=`umask`
umask 000;
exec 9> $FLAG_TINYROT_LOCK
umask $mode;
flock 9

# Not sending log to server (not coming from pipelog)
if [ x$SENDING_GZIP == "x" ] ; then
    ALLFILES=`ls -1  $ARCHIVE_DIR/${LOG}_*.gz | xargs`
    if [ -n "$ALLFILES" ]; then
        cat $ALLFILES | zcat >> "$OUTFILE"
    fi
    cat /var/log/$LOG >> "$OUTFILE"
else # coming from pipelog
    # Sending partial logs
    if [ x$SENDING_FULL == "x0" ] && [ -e $ARCHIVE_DIR/${LOG}_${OLDEST_FILE} ] ; then
        OLDEST_LZ=`cat $ARCHIVE_DIR/${LOG}_${OLDEST_FILE}`

        if [ -s $NEXTFILETOSEND ]; then
            OLDEST_LZ=`cat $NEXTFILETOSEND`
        fi

        YOUNGEST_LZ=`cat $ARCHIVE_DIR/${LOG}_${YOUNGEST_FILE}`
        COUNTER_LZ=$OLDEST_LZ

        OLDEST=`echo $OLDEST_LZ|sed 's/[0]*\(.*\)/\1/g'`
        YOUNGEST=`echo $YOUNGEST_LZ|sed 's/[0]*\(.*\)/\1/g'`
        COUNTER=`echo $COUNTER_LZ|sed 's/[0]*\(.*\)/\1/g'`


        while [ ${COUNTER} -lt ${YOUNGEST} ]; do
            FILE=$ARCHIVE_DIR/${LOG}_${COUNTER_LZ}_*.gz
            if [ -e $FILE ]; then
                ALLFILES="$ALLFILES $FILE"
                NUMFILES=$(($NUMFILES+1))
            fi
            COUNTER=$(($COUNTER+1))
            COUNTER_LZ=`echo $COUNTER | awk '{ printf "%08d", $1 }'`
        done
        # update LASTFILESENT
        if [ ${NUMFILES} -gt 0 ]; then
            echo $COUNTER | awk '{ printf "%08d", $1 }' > $LASTFILESENT
        else
            cat $NEXTFILETOSEND | awk '{ printf "%08d", $1 }' > $LASTFILESENT
        fi
        
 
 	# Ask Kindle status service to log all service status to a file.
 	lipc-set-prop com.lab126.kindleStatusService logToFile all
	# Sleep for some time for the file to get populated.
 	sleep 5;       
        gzip $KINDLE_STATUS_MESSAGE_LOG -c > $KINDLE_STATUS_MESSAGE_LOG_ZIP 2> /dev/null
        
        
        if [ -f $KINDLE_STATUS_MESSAGE_LOG_ZIP ];
        then
        
            ALLFILES="$ALLFILES $KINDLE_STATUS_MESSAGE_LOG_ZIP"
	    NUMFILES=$(($NUMFILES+1))
	fi
        
        print_stream_header $NUMFILES  >> "$OUTFILE"
        $GZIP_HEADER_TYPE $ALLFILES  >> "$OUTFILE"
        
        rm -rf $KINDLE_STATUS_MESSAGE_LOG_ZIP
        rm -rf $KINDLE_STATUS_MESSAGE_LOG
        
    else # Sending full logs
    
 	# Ask Kindle status service to log all service status to a file.
 	RES=`lipc-set-prop com.lab126.kindleStatusService logToFile all`
	if [ $RES -eq 0 ];
	then
	    # Sleep for some time for the file to get populated.
	    sleep 5;       
            gzip $KINDLE_STATUS_MESSAGE_LOG -c > $KINDLE_STATUS_MESSAGE_LOG_ZIP 2> /dev/null
	fi

        if [ -f $KINDLE_STATUS_MESSAGE_LOG_ZIP ];
        then
        
            ALLFILES="$ALLFILES $KINDLE_STATUS_MESSAGE_LOG_ZIP"
	    NUMFILES=$(($NUMFILES+1))
	fi
    
        print_stream_header  `ls $ARCHIVE_DIR/${LOG}_*.gz | wc -l ` >> "$OUTFILE"
        $GZIP_HEADER_TYPE `ls $ARCHIVE_DIR/${LOG}_*.gz | xargs ` >> "$OUTFILE"
        
        rm -rf $KINDLE_STATUS_MESSAGE_LOG_ZIP
        rm -rf $KINDLE_STATUS_MESSAGE_LOG
    fi
fi
